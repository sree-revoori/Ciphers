from collections import Counter 
#Helper Methods
def c2i(c, alphabet) : 
  return alphabet.index(c) 
  
def i2c(i, alphabet) :
  return alphabet[i]
  
def prepare_string(s, alphabet) :
  temp = s 
  alphaList = list(alphabet)
  sList = list(temp)
  for index in range(len(sList)) : 
    for index2 in range(len(alphaList)) : 
      if temp[index] == alphaList[index2] :
        break
      if index2 + 1 == len(alphaList) :
        sList.remove(temp[index])
    
  final = ''.join(sList)
  return final
  
  #encoding
  def caesar_shift_encode(plaintext, shift, alphabet) :
  plaintext = plaintext.upper()
  temp = prepare_string(plaintext, alphabet) 
  string = ""
  newChar = ""
  for character in temp : 
    aIndex = c2i(character, alphabet) 
    newIndex = c2i(character, alphabet) + shift 
    if newIndex >= 25 : 
      tempIndex = 25 - aIndex 
      newIndex = shift - tempIndex - 1 
      newChar = i2c(newIndex, alphabet)
    else :
      newChar = i2c(newIndex, alphabet) 
    string += newChar
  return string
  
  # decoding
  def caesar_shift_decode(ciphertext, shift, alphabet) : 
  temp = ciphertext
  string = "" 
  newChar = ""
  for character in temp : 
    newIndex = c2i(character, alphabet) - shift
    newChar = i2c(newIndex, alphabet)
    string += newChar
  return string
  
